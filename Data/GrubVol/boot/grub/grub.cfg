#
# MagicDrive Grub2 main config
#

### BEGIN Common Functions ###
function get_pathname { regexp -s 2:"$2" '^(\(.*\))?(/.*)$' "$1"; }
function get_filename { regexp -s 1:"$2" '/([^/]+)$' "$1"; }
function get_devname { regexp -s "$2" '^(\(.*\)).*$' "$1"; }
function rm_extension { regexp -s 1:"$2" '^([^\.]*)\..*$' "$1"; }

function pause {
  echo ''
  echo 'Press [Enter] to continue...'
  read tmpvar
}

# To avoid unexpected error message...
function setenv_if_file_found {
  if [ -f "$2" ]; then
    set "$1"="$2"
  else
    true
  fi
}

function load_video {
  if [ x$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}

function loopback_iso_entry {
  isofullpath="$1"

  cfgpath=
  setenv_if_file_found cfgpath '/boot/grub/loopback.cfg'
  setenv_if_file_found cfgpath '/grub/loopback.cfg'
  if [ -z "$cfgpath" ]; then return 1; fi
  echo "*** loopback.cfg *** ${isofullpath}: ok"

  get_devname $isofullpath realdev
  get_pathname $isofullpath isopath
  get_filename $isofullpath isofile
  menuentry "$isofile" "$realdev" "$isopath" "$cfgpath" {
    set device="$2"
    set iso_path="$3"
    set cfg_path="$4"

    export iso_path
    loopback loopdev_cfg "${device}${iso_path}"
    set root=(loopdev_cfg)
    configfile $cfg_path
    loopback -d loopdev_cfg
  }
  return 0
}

function casper_iso_entry {
  isofullpath="$1"

  kernel=
  setenv_if_file_found kernel '/casper/vmlinuz'
  setenv_if_file_found kernel '/casper/vmlinuz.efi'
  if [ -z "$kernel" ]; then return 1; fi

  initrd=
  for f in /casper/initrd.*z; do
    if [ -f "$f" ]; then
      get_pathname "$f" initrd
    fi
  done
  if [ -z "$initrd" ]; then return 1; fi
  echo "*** casper *** ${isofullpath}: ok"

  get_pathname $isofullpath isopath
  get_devname $isofullpath realdev
  get_filename $isofullpath isoname
  menuentry "$isoname" "$realdev" "$isopath" "$kernel" "$initrd" {
    set realdev="$2"
    set isopath="$3"
    set kernel="$4"
    set initrd="$5"

    loopback loopdev_casper "${realdev}${isopath}"
    set root=(loopdev_casper)
    linux ${kernel} boot=casper iso-scan/filename="$isopath" quiet splash ---
    initrd $initrd
    loopback -d loopdev_casper
  }
  return 0
}

function anaconda_iso_entry {
  isofullpath="$1"

  kernel=
  initrd=
  setenv_if_file_found kernel '/isolinux/vmlinuz'
  setenv_if_file_found initrd '/isolinux/initrd.img'
  if [ -z "$kernel" ]; then return 1; fi
  if [ -z "$initrd" ]; then return 1; fi

  get_pathname $isofullpath isopath
  get_devname $isofullpath realdev
  get_filename $isofullpath isoname

  devuuid=
  for f in ${realdev}/osimages/*.devuuid ${realdev}/osimages/*.DEVUUID; do
    get_filename "$f" devuuidfilename
    rm_extension "$devuuidfilename" devuuid
    break
  done

  if [ $realdev != "(${uservol})" ]; then
    if [ -z "$devuuid" ]; then
      echo "*** anaconda *** ${isofullpath}: Image is not on the ${usrdata_label} partition and no devuuid file found under ${realdev}/osimages/."
      return 2
    fi
  fi
  echo "*** anaconda *** ${isofullpath}: ok"

  menuentry "$isoname" "$realdev" "$devuuid" "$isopath" "$kernel" "$initrd" {
    set realdev="$2"
    set devuuid="$3"
    set isopath="$4"
    set kernel="$5"
    set initrd="$6"

    loopback loopdev_anaconda "${realdev}${isopath}"
    set root=(loopdev_anaconda)
    if [ $realdev == "(${uservol})" ]; then
      linux $kernel noeject inst.repo=hd:LABEL=${usrdata_label}:$isopath
    else
      linux $kernel noeject inst.repo=hd:UUID=${devuuid}:$isopath
    fi
    initrd $initrd
    loopback -d loopdev_anaconda
  }
  return 0
}

function livecd_iso_entry {
  isofullpath="$1"

  kernel=
  initrd=
  setenv_if_file_found kernel '/isolinux/vmlinuz0'
  setenv_if_file_found initrd '/isolinux/initrd0.img'
  if [ -z "$kernel" ]; then return 1; fi
  if [ -z "$initrd" ]; then return 1; fi
  
  get_pathname $isofullpath isopath
  get_devname $isofullpath realdev
  get_filename $isofullpath isoname
  rm_extension $isoname isolabel

  search --no-floppy --label --set=loopvol ${isolabel}
  if [ $? != 0 ]; then
    # If the iso file name is not the same wtih the iso label, skip it...
    echo "*** livecd *** ${isofullpath}: Image filename does not match ISO lable"
    return 2
  fi
  echo "*** livecd *** ${isofullpath}: ok"

  menuentry "$isoname" "$isolabel" "$realdev" "$isopath" "$kernel" "$initrd" {
    set isolabel="$2"
    set realdev="$3"
    set isopath="$4"
    set kernel="$5"
    set initrd="$6"

    loopback loopdev_livecd "${realdev}${isopath}"
    set root=(loopdev_livecd)
    linux $kernel root=live:CDLABEL=$isolabel iso-scan/filename=$isopath rd.live.image quiet splash --
    initrd $initrd
    loopback -d loopdev_livecd
  }
  return 0
}
### END Common Functions ###


### BEGIN Grub initial config ###
if [ -s $prefix/grubenv ]; then
  set have_grubenv=true
  load_env
fi

if [ x$feature_default_font_path = xy ]; then
  font=unicode
else
  font=$prefix/fonts/unicode.pf2
fi

if loadfont $font; then
  set gfxmode=auto
  load_video
  insmod gfxterm
  set locale_dir=$prefix/locale
  set lang=en_US
  insmod gettext
fi
terminal_output gfxterm
insmod regexp
set timeout=10

echo ''
echo 'Scanning local disks for OS images, please wait...'

search --no-floppy --fs-uuid --set=grubvol ${grub_fsuuid}
search --no-floppy --fs-uuid --set=winpevol ${winpe_fsuuid}
search --no-floppy --fs-uuid --set=uservol ${usrdata_fsuuid}
if [ $? != 0 ]; then
  # In case when bear kids formatted the user volume
  search --no-floppy --label --set=uservol ${usrdata_label}
fi
export grub_fsuuid winpe_fsuuid usrdata_fsuuid usrdata_label uservol grubvol winpevol
### END Grub initial config ###


### BEGIN Windows ###
menuentry 'Install Windows' {
  set root=($winpevol)
  if [ "${grub_platform}" == "efi" ]; then
    parttool ${root} hidden-
    if cpuid -l; then
      chainloader /EFI/Microsoft-x64/Boot/bootmgfw.efi
    else
      chainloader /EFI/Microsoft-x86/Boot/bootmgfw.efi
    fi
  else
    parttool ${root} hidden-
    drivemap -s (hd0) ${root}
    chainloader +1
  fi
}
### END Windows ###


### BEGIN Ubuntu ###
set image_file_found='no'
for dev in (*); do
  if [ -d ${dev}/osimages/Ubuntu ]; then
    for file in ${dev}/osimages/Ubuntu/*.iso ${dev}/osimages/Ubuntu/*.ISO; do
      if [ -f $file ]; then
        set image_file_found='yes'
        break
      fi
    done
    if [ $image_file_found == 'yes' ]; then break; fi
  fi
done

if [ $image_file_found == 'yes' ]; then
  submenu 'Install Ubuntu' {
    for dev in (*); do
      if [ -d ${dev}/osimages/Ubuntu ]; then
        for file in ${dev}/osimages/Ubuntu/*.iso ${dev}/osimages/Ubuntu/*.ISO; do
          if [ ! -f "$file" ]; then continue; fi
          if ! loopback loopdev "$file"; then continue; fi
          saved_root=$root
          set root=(loopdev)
          if   loopback_iso_entry $file; then true;
          elif casper_iso_entry   $file; then true;
          else true; fi
          set root=$saved_root
          loopback -d loopdev
        done
      fi
    done
  }
fi
### END Ubuntu ###


### BEGIN RHEL ###
set image_file_found='no'
for dev in (*); do
  if [ -d ${dev}/osimages/RHEL ]; then
    for file in ${dev}/osimages/RHEL/*.iso ${dev}/osimages/RHEL/*.ISO; do
      if [ -f $file ]; then
        set image_file_found='yes'
        break
      fi
    done
    if [ $image_file_found == 'yes' ]; then break; fi
  fi
done

if [ $image_file_found == 'yes' ]; then
  submenu 'Install RHEL' {
    for dev in (*); do
      if [ -d ${dev}/osimages/RHEL ]; then
        for file in ${dev}/osimages/RHEL/*.iso ${dev}/osimages/RHEL/*.ISO; do
          if [ ! -f "$file" ]; then continue; fi
          if ! loopback loopdev "$file"; then continue; fi
          saved_root=$root
          set root=(loopdev)
          if   anaconda_iso_entry $file; then true;
          elif livecd_iso_entry   $file; then true;
          else true; fi
          set root=$saved_root
          loopback -d loopdev
        done
      fi
    done
  }
fi
### END RHEL ###


### BEGIN CentOS ###
set image_file_found='no'
for dev in (*); do
  if [ -d ${dev}/osimages/CentOS ]; then
    for file in ${dev}/osimages/CentOS/*.iso ${dev}/osimages/CentOS/*.ISO; do
      if [ -f $file ]; then
        set image_file_found='yes'
        break
      fi
    done
    if [ $image_file_found == 'yes' ]; then break; fi
  fi
done

if [ $image_file_found == 'yes' ]; then
  submenu 'Install CentOS' {
    for dev in (*); do
      if [ -d ${dev}/osimages/CentOS ]; then
        for file in ${dev}/osimages/CentOS/*.iso ${dev}/osimages/CentOS/*.ISO; do
          if [ ! -f "$file" ]; then continue; fi
          if ! loopback loopdev "$file"; then continue; fi
          saved_root=$root
          set root=(loopdev)
          if   anaconda_iso_entry $file; then true;
          elif livecd_iso_entry   $file; then true;
          else true; fi
          set root=$saved_root
          loopback -d loopdev
        done
      fi
    done
  }
fi
### END CentOS ###


### BEGIN Fedora ###
set image_file_found='no'
for dev in (*); do
  if [ -d ${dev}/osimages/Fedora ]; then
    for file in ${dev}/osimages/Fedora/*.iso ${dev}/osimages/Fedora/*.ISO; do
      if [ -f $file ]; then
        set image_file_found='yes'
        break
      fi
    done
    if [ $image_file_found == 'yes' ]; then break; fi
  fi
done

if [ $image_file_found == 'yes' ]; then
  submenu 'Install Fedora' {
    for dev in (*); do
      if [ -d ${dev}/osimages/Fedora ]; then
        for file in ${dev}/osimages/Fedora/*.iso ${dev}/osimages/Fedora/*.ISO; do
          if [ ! -f "$file" ]; then continue; fi
          if ! loopback loopdev "$file"; then continue; fi
          saved_root=$root
          set root=(loopdev)
          if   anaconda_iso_entry $file $usrdata_label; then true;
          elif livecd_iso_entry   $file; then true;
          else true; fi
          set root=$saved_root
          loopback -d loopdev
        done
      fi
    done
  }
fi
### END Fedora ###


### BEGIN iPXE ###
submenu 'Install OS via iPXE' {
  for dev in (*); do
    if [ -d ${dev}/osimages/iPXE ]; then
      if [ "${grub_platform}" == "efi" ]; then
        for file in ${dev}/osimages/iPXE/*.efi ${dev}/osimages/iPXE/*.EFI; do
          if [ ! -f "$file" ]; then continue; fi
          get_filename $file imgname
          menuentry "$imgname" "$file" {
            chainloader $2
          }
        done
      else
        for file in ${dev}/osimages/iPXE/*.lkrn ${dev}/osimages/iPXE/*.LKRN ${dev}/osimages/iPXE/*.krn ${dev}/osimages/iPXE/*.KRN; do
          if [ ! -f "$file" ]; then continue; fi
          get_filename $file imgname
          menuentry "$imgname" "$file" {
            linux16 $2
          }
        done
      fi
    fi
  done

  menuentry 'Start iPXE shell' {
    echo ''
    echo 'Starting iPXE shell...'
    echo ''
    if [ "${grub_platform}" == "efi" ]; then
      chainloader /sysutil/ipxe/ipxe.efi
    else
      linux16 /sysutil/ipxe/ipxe.lkrn
    fi
  }
}
### END iPXE ###


### BEGIN Memdisk ###
set image_file_found='no'
for dev in (*); do
  if [ -d ${dev}/osimages/Memdisk ]; then
    for file in ${dev}/osimages/Memdisk/*.iso ${dev}/osimages/Memdisk/*.ISO; do
      if [ -f $file ]; then
        set image_file_found='yes'
        break
      fi
    done
    if [ $image_file_found == 'yes' ]; then break; fi
  fi
done

if [ $image_file_found == 'yes' ]; then
  submenu 'Install OS via Memdisk' {
    for dev in (*); do
      if [ -d  ${dev}/osimages/Memdisk ]; then
        for file in ${dev}/osimages/Memdisk/*.iso ${dev}/osimages/Memdisk/*.ISO; do
          if [ ! -f "$file" ]; then continue; fi
          get_filename $file isoname
          menuentry "$isoname" "$file" {
            imgfile="$2"
            echo ''
            echo "Loading image file ${imgfile} into memory..."
            echo ''
            linux16 /sysutil/syslinux/memdisk iso
            initrd16 $imgfile
          }
        done
      fi
    done
  }
fi
### END Memdisk ###


### BEGIN Custom Config ###
set cfg_file_found='no'
for dev in (*); do
  if [ -d ${dev}/osimages/Custom ]; then
    for file in ${dev}/osimages/Custom/*.cfg ${dev}/osimages/Custom/*.CFG; do
      if [ -f $file ]; then
        set cfg_file_found='yes'
        break
      fi
    done
    if [ $cfg_file_found == 'yes' ]; then break; fi
  fi
done

if [ $cfg_file_found == 'yes' ]; then
  submenu 'Load custom boot configuration' {
    for dev in (*); do
      if [ -d ${dev}/osimages/Custom ]; then
        for file in ${dev}/osimages/Custom/*.cfg ${dev}/osimages/Custom/*.CFG; do
          if [ ! -f "$file" ]; then continue; fi
          get_filename $file cfgname
          menuentry "$cfgname" "$file" {
            configfile $2
          }
        done
      fi
    done
  }
fi
### END Custom Config ###
